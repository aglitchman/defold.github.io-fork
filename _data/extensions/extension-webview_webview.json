{
    "elements": [
        {
            "description": "Creates a webview instance. It can show HTML pages as well as evaluate Javascript. The view remains hidden until the first call. There can exist a maximum of 4 webviews at the same time.\nOn iOS, the callback will never get a `webview.CALLBACK_RESULT_EVAL_ERROR`, due to the iOS SDK implementation.\"",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">webview_callback</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">webview_id</span><span class=\"p\">,</span> <span class=\"n\">request_id</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"kr\">if</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">CALLBACK_RESULT_URL_OK</span> <span class=\"kr\">then</span>\n        <span class=\"c1\">-- the page is now loaded, let&#39;s show it</span>\n        <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">set_visible</span><span class=\"p\">(</span><span class=\"n\">webview_id</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"kr\">elseif</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">CALLBACK_RESULT_URL_ERROR</span> <span class=\"kr\">then</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to load url: &quot;</span> <span class=\"o\">..</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;url&quot;</span><span class=\"p\">])</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Error: &quot;</span> <span class=\"o\">..</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;error&quot;</span><span class=\"p\">])</span>\n    <span class=\"kr\">elseif</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">CALLBACK_RESULT_URL_LOADING</span> <span class=\"kr\">then</span>\n        <span class=\"c1\">-- a page is loading</span>\n        <span class=\"c1\">-- return false to prevent it from loading</span>\n        <span class=\"c1\">-- return true or nil to continue loading the page</span>\n        <span class=\"kr\">if</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">url</span> <span class=\"o\">~=</span> <span class=\"s2\">&quot;https://www.defold.com/&quot;</span> <span class=\"kr\">then</span>\n            <span class=\"kr\">return</span> <span class=\"kc\">false</span>\n        <span class=\"kr\">end</span>\n    <span class=\"kr\">elseif</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">CALLBACK_RESULT_EVAL_OK</span> <span class=\"kr\">then</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Eval ok. Result: &quot;</span> <span class=\"o\">..</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;result&#39;</span><span class=\"p\">])</span>\n    <span class=\"kr\">elseif</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">CALLBACK_RESULT_EVAL_ERROR</span> <span class=\"kr\">then</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Eval not ok. Request # &quot;</span> <span class=\"o\">..</span> <span class=\"n\">request_id</span><span class=\"p\">)</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n<span class=\"kd\">local</span> <span class=\"n\">webview_id</span> <span class=\"o\">=</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">webview_callback</span><span class=\"p\">)</span>\n</code></pre></div>",
            "name": "webview.create",
            "parameters": [
                {
                    "doc": "A callback which receives info about finished requests taking the following parameters:",
                    "name": "callback",
                    "parameters": [
                        {
                            "doc": "The calling script",
                            "name": "self",
                            "types": [
                                "object"
                            ]
                        },
                        {
                            "doc": "The webview id",
                            "name": "webview_id",
                            "types": [
                                "number"
                            ]
                        },
                        {
                            "doc": "The request id",
                            "name": "request_id",
                            "types": [
                                "number"
                            ]
                        },
                        {
                            "doc": "The type of callback\n- `webview.CALLBACK_RESULT_URL_OK`\n- `webview.CALLBACK_RESULT_URL_ERROR`\n- `webview.CALLBACK_RESULT_URL_LOADING`\n- `webview.CALLBACK_RESULT_EVAL_OK`\n- `webview.CALLBACK_RESULT_EVAL_ERROR`",
                            "name": "type",
                            "types": [
                                "enum"
                            ]
                        },
                        {
                            "doc": "A table holding the data",
                            "name": "data",
                            "parameters": [
                                {
                                    "doc": "The url used in the `webview.open()` call. `nil` otherwise.",
                                    "name": "url",
                                    "types": [
                                        "string"
                                    ]
                                },
                                {
                                    "doc": "Holds the result of either: a failed url open, a successful eval request or a failed eval. `nil` otherwise.",
                                    "name": "result",
                                    "types": [
                                        "string"
                                    ]
                                }
                            ],
                            "types": [
                                "table"
                            ]
                        }
                    ],
                    "types": [
                        "function"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Destroys an instance of a webview.",
            "examples": "",
            "name": "webview.destroy",
            "parameters": [
                {
                    "doc": "The webview id (returned by the `webview.create()` call)",
                    "name": "webview_id",
                    "types": [
                        "number"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Opens a web page in the webview, using an URL. Once the request is done, the callback (registered in `webview.create()`) is invoked.",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">request_id</span> <span class=\"o\">=</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">webview_id</span><span class=\"p\">,</span> <span class=\"s2\">&quot;http://www.defold.com&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">hidden</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">})</span>\n</code></pre></div>",
            "name": "webview.open",
            "parameters": [
                {
                    "doc": "The webview id",
                    "name": "webview_id",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "The URL to open",
                    "name": "url",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "A table of options for the request. Currently it holds these options:",
                    "name": "options",
                    "parameters": [
                        {
                            "doc": "If true, the webview will stay hidden (default=false)",
                            "name": "hidden",
                            "types": [
                                "boolean"
                            ]
                        },
                        {
                            "doc": "A table of header keys and values",
                            "name": "headers",
                            "types": [
                                "table"
                            ]
                        },
                        {
                            "doc": "If true, the webview background will be transparent (default=false)",
                            "name": "transparent",
                            "types": [
                                "boolean"
                            ]
                        }
                    ],
                    "types": [
                        "table"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Opens a web page in the webview, using HTML data. Once the request is done, the callback (registered in `webview.create()`) is invoked.",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">load_resource</span><span class=\"p\">(</span><span class=\"s2\">&quot;/main/data/test.html&quot;</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">request_id</span> <span class=\"o\">=</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">open_raw</span><span class=\"p\">(</span><span class=\"n\">webview_id</span><span class=\"p\">,</span> <span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">hidden</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">})</span>\n</code></pre></div>",
            "name": "webview.open_raw",
            "parameters": [
                {
                    "doc": "The webview id",
                    "name": "webview_id",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "The HTML data to display",
                    "name": "html",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "A table of options for the request. See `webview.open()`",
                    "name": "options",
                    "types": [
                        "table"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Evaluates JavaScript within the context of the currently loaded page (if any). Once the request is done, the callback (registered in `webview.create()`) is invoked. The callback will get the result in the `data[\"result\"]` field.",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">request_id</span> <span class=\"o\">=</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">webview_id</span><span class=\"p\">,</span> <span class=\"s2\">&quot;GetMyFormData()&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
            "name": "webview.eval",
            "parameters": [
                {
                    "doc": "The webview id",
                    "name": "webview_id",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "The JavaScript code to evaluate",
                    "name": "code",
                    "types": [
                        "string"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Set transparency of webview background",
            "examples": "",
            "name": "webview.set_transparent",
            "parameters": [
                {
                    "doc": "The webview id",
                    "name": "webview_id",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "If `true`, the webview background becomes transparent, otherwise opaque.",
                    "name": "transparent",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Shows or hides a webview",
            "examples": "",
            "name": "webview.set_visible",
            "parameters": [
                {
                    "doc": "The webview id",
                    "name": "webview_id",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "If `0`, hides the webview. If non zero, shows the view",
                    "name": "visible",
                    "types": [
                        "number"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Returns the visibility state of the webview.",
            "examples": "",
            "name": "webview.is_visible",
            "parameters": [
                {
                    "doc": "The webview id",
                    "name": "webview_id",
                    "types": [
                        "number"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Sets the position and size of the webview",
            "examples": "",
            "name": "webview.set_position",
            "parameters": [
                {
                    "doc": "The webview id",
                    "name": "webview_id",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "The x position of the webview",
                    "name": "x",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "The y position of the webview",
                    "name": "y",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "The width of the webview (-1 to match screen width)",
                    "name": "width",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "The height of the webview (-1 to match screen height)",
                    "name": "height",
                    "types": [
                        "number"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "",
            "examples": "",
            "name": "CALLBACK_RESULT_URL_OK",
            "parameters": [],
            "returnvalues": [],
            "type": "VARIABLE"
        },
        {
            "description": "",
            "examples": "",
            "name": "CALLBACK_RESULT_URL_ERROR",
            "parameters": [],
            "returnvalues": [],
            "type": "VARIABLE"
        },
        {
            "description": "",
            "examples": "",
            "name": "CALLBACK_RESULT_URL_LOADING",
            "parameters": [],
            "returnvalues": [],
            "type": "VARIABLE"
        },
        {
            "description": "",
            "examples": "",
            "name": "CALLBACK_RESULT_EVAL_OK",
            "parameters": [],
            "returnvalues": [],
            "type": "VARIABLE"
        },
        {
            "description": "",
            "examples": "",
            "name": "CALLBACK_RESULT_EVAL_ERROR",
            "parameters": [],
            "returnvalues": [],
            "type": "VARIABLE"
        }
    ],
    "info": {
        "api": "extension-webview/webview_api",
        "brief": "webview",
        "description": "Functions and constants for interacting with webview APIs",
        "group": "EXTENSIONS",
        "name": "extension-webview",
        "namespace": "webview"
    }
}